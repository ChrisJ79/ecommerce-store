{"version":3,"sources":["components/menu-item/menu-item.jsx","components/directory/directory.jsx","pages/homepage/homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","title","imageUrl","size","history","linkUrl","match","className","onClick","push","style","backgroundImage","toUpperCase","Directory","state","sections","id","this","map","key","Component","Homepage","HatsPage","App","exact","path","component","HomePage","Boolean","window","location","hostname","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sXAoBeA,G,MAAAA,aAfE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,QAA1B,EAAmCC,QAAnC,EAA4CC,MAA5C,OACf,yBAAKC,UAAS,UAAKJ,EAAL,cAAuBK,QAAS,kBAAMJ,EAAQK,KAAK,4BAC/D,yBACEF,UAAU,mBACVG,MAAO,CACLC,gBAAgB,OAAD,OAAST,EAAT,QAGnB,yBAAKK,UAAU,WACb,wBAAIA,UAAU,SAASN,EAAMW,eAC7B,0BAAML,UAAU,YAAhB,kBC8CSM,G,kBAxDd,aAAe,IAAD,8BACb,+CACKC,MAAQ,CACZC,SAAU,CACT,CACCd,MAAO,OACPC,SAAU,oCACVc,GAAI,EACJX,QAAS,QAEV,CACCJ,MAAO,UACPC,SAAU,uCACVc,GAAI,EACJX,QAAS,IAEV,CACCJ,MAAO,QACPC,SAAU,wCACVc,GAAI,EACJX,QAAS,IAEV,CACCJ,MAAO,SACPC,SAAU,sCACVC,KAAM,QACNa,GAAI,EACJX,QAAS,IAEV,CACCJ,MAAO,OACPC,SAAU,mCACVC,KAAM,QACNa,GAAI,EACJX,QAAS,MAlCC,E,sEAyCb,OACC,yBAAKE,UAAU,kBACbU,KAAKH,MAAMC,SAASG,KAAI,gBAAEjB,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAUc,EAAnB,EAAmBA,GAAIb,EAAvB,EAAuBA,KAAvB,OACxB,kBAAC,EAAD,CACCgB,IAAKH,EACLf,MAAOA,EACPC,SAAUA,EACVC,KAAMA,Y,GAjDYiB,cCUTC,G,MATE,kBAChB,yBAAKd,UAAU,YACd,kBAAC,EAAD,SCDIe,EAAW,kBACf,6BACE,2CAgBWC,MAZf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWJ,OCLnBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCVN0B,IAASC,OACL,kBAAC,IAAD,CAAeC,SAAUC,oBACzB,kBAAC,EAAD,OACkBC,SAASC,eAAe,SDwHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.72bcdd0a.chunk.js","sourcesContent":["import React from 'react';\nimport './menu-item.scss';\nimport {withRouter} from 'react-router-dom';\n\n\nconst MenuItem = ({ title, imageUrl, size, history, linkUrl, match }) => (\n  <div className={`${size} menu-item`} onClick={() => history.push('${match.url}${linkUrl}')}>\n    <div\n      className='background-image'\n      style={{\n        backgroundImage: `url(${imageUrl})`\n      }}\n    />\n    <div className='content'>\n      <h1 className='title'>{title.toUpperCase()}</h1>\n      <span className='subtitle'>SHOP NOW</span>\n    </div>\n  </div>\n);\n\nexport default withRouter(MenuItem);\n","import React, {Component} from 'react';\nimport MenuItem from '../menu-item/menu-item';\nimport './directory.scss';\n\nclass Directory extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\ttitle: 'hats',\n\t\t\t\t\timageUrl: 'https://i.ibb.co/cvpntL1/hats.png',\n\t\t\t\t\tid: 1,\n\t\t\t\t\tlinkUrl: 'hats'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: 'jackets',\n\t\t\t\t\timageUrl: 'https://i.ibb.co/px2tCc3/jackets.png',\n\t\t\t\t\tid: 2,\n\t\t\t\t\tlinkUrl: ''\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: 'shoes',\n\t\t\t\t\timageUrl: 'https://i.ibb.co/0jqHpnp/sneakers.png',\n\t\t\t\t\tid: 3,\n\t\t\t\t\tlinkUrl: ''\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: 'womens',\n\t\t\t\t\timageUrl: 'https://i.ibb.co/GCCdy8t/womens.png',\n\t\t\t\t\tsize: 'large',\n\t\t\t\t\tid: 4,\n\t\t\t\t\tlinkUrl: ''\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: 'mens',\n\t\t\t\t\timageUrl: 'https://i.ibb.co/R70vBrQ/men.png',\n\t\t\t\t\tsize: 'large',\n\t\t\t\t\tid: 5,\n\t\t\t\t\tlinkUrl: ''\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"directory-menu\">\n\t\t\t\t{this.state.sections.map(({title, imageUrl, id, size}) =>  (\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\timageUrl={imageUrl}\n\t\t\t\t\t\tsize={size}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Directory;\n","import React from 'react';\nimport Directory from '../../components/directory/directory';\nimport './homepage.scss';\n\n\nconst Homepage = () => (\n\t<div className=\"homepage\">\n\t\t<Directory />\n\t</div>\n);\n\n\n\n\nexport default Homepage;\n","import React from 'react';\nimport './App.css';\nimport {Route, Switch} from 'react-router-dom';\n\nimport HomePage from './pages/homepage/homepage';\n\nconst HatsPage = () => (\n  <div>\n    <h1>Hats Page</h1>\n  </div>\n);\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path='/' component={HomePage} />\n        <Route path='/hats' component={HatsPage} />\n      </Switch>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}